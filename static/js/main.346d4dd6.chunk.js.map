{"version":3,"sources":["context.tsx","utils/functions.tsx","hooks/useBoardData.tsx","components/Board/BoardParams.tsx","components/Board/index.tsx","components/RobotScents/index.tsx","components/RobotInstructions/index.tsx","app.tsx","index.tsx"],"names":["initialContext","board","width","height","grid","board_builded","current_robot","current_direction","cordinates","x","y","lost","robot_scents","lost_cordinates","BoardContext","React","createContext","BoardProvider","children","useState","state","setState","Provider","value","validateInput","regex","test","currentRobotId","useBoardData","useContext","currentRobotIsLost","setBoardBuilded","isBuilded","prevState","constructBoardGrid","boardWidth","boardHeight","rows","push","isLost","position","some","elem","lostCordinates","setLostCordinates","moveRobot","currentRobot","instructions","currentDirection","newPosition","lastPosition","split","every","move","toUpperCase","setRobotOnBoard","setRobotScent","newGrid","robotScents","scent","degrees","degreesToOrientation","getBoard","getRobotScents","getBoardBuilded","getBoardWidth","getBoardHeight","buildBoard","buildAndMoveRobot","direction","startCordinates","orientation","orientationToDegrees","BoardParams","setBoardWidth","setBoardHeight","widthValue","setWidthValue","heightValue","setHeightValue","clearInputs","className","type","onChange","e","parseInt","currentTarget","toString","placeholder","onClick","disabled","Board","map","row","i","col","j","RobotScents","REGEX_DIRECTION","REGEX_INSTRUCTIONS","RobotInstructions","robotStartCordinates","setRobotStartCordinates","robotDirection","setRobotDirection","robotInstructions","setRobotInstructions","xValue","setXValue","yValue","setYValue","initialDirectionValue","setInitialDirectionValue","instructionsValue","setInstructionsValue","min","max","App","boardBuilded","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.346d4dd6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { InitialContextTypes, ProviderProps } from \"./context.types\";\n\nconst initialContext: InitialContextTypes = {\n    board: {\n        width: 0,\n        height: 0,\n        grid: []\n    },\n    board_builded: false,\n    current_robot: {\n        current_direction: 0,\n        cordinates: {\n            x: 0,\n            y: 0,\n        },\n        lost: false\n    },\n    robot_scents: [],\n    lost_cordinates: [{\n        x: 5,\n        y: 1,\n    }],\n}\n\nconst BoardContext = React.createContext<any>(initialContext);\n\nconst BoardProvider = ({children}: ProviderProps) => {\n    const [state, setState] = useState<any>(initialContext);\n    return <BoardContext.Provider value={[state, setState]}>{children}</BoardContext.Provider>;\n}\n\nexport { BoardContext, BoardProvider, initialContext };\n","const orientationToDegrees = (orientation: string):number => {\r\n    switch (orientation) {\r\n      case 'N':\r\n        return 0;\r\n      case 'E':\r\n        return 90;\r\n      case 'S':\r\n        return 180;\r\n      case 'W':\r\n        return 270;\r\n      default: \r\n        return 0\r\n    }\r\n  }\r\n\r\nconst degreesToOrientation = (degrees: number):string => {\r\n    switch (degrees) {\r\n      case 0:\r\n        return 'N';\r\n      case 90:\r\n        return 'E';\r\n      case 180:\r\n        return 'S';\r\n      case 270:\r\n        return 'W';\r\n      default: \r\n        return 'N'\r\n    }\r\n}\r\n\r\nconst validateInput = (regex: RegExp, value: string):boolean => value === \"\" || regex.test(value);\r\n\r\nexport {orientationToDegrees, degreesToOrientation, validateInput};","import { useContext } from \"react\";\nimport { BoardContext } from \"../context\";\nimport { degreesToOrientation, orientationToDegrees } from \"../utils/functions\";\nimport { InitialContextTypes, currentRobotTypes, cordinateTypes } from '../context.types';\n\nconst ROTATE_LEFT = -90;\nconst ROTATE_RIGHT = 90;\n\nlet currentRobotId = 1;\n\n\nconst useBoardData = () => {\n\n  const [state, setState] = useContext(BoardContext);\n\n  let currentRobotIsLost = false;\n\n  const getBoard = () => state.board;\n  const getRobotScents = () => state.robot_scents;\n  const getBoardBuilded = () => state.board_builded;\n  const getBoardWidth = () => state.board.width;\n  const getBoardHeight = () => state.board.height;\n\n  const setLostCordinates = (position: cordinateTypes):void => {\n    let lostCordinates = [...state.lost_cordinates];\n    lostCordinates.push(position);\n    setState((prevState: InitialContextTypes) => ({\n      ...prevState,\n      lost_cordinates: lostCordinates,\n    }));\n  }\n\n  const setBoardBuilded = (isBuilded: boolean):void => {\n    setState((prevState: InitialContextTypes) => ({\n      ...prevState,\n      board_builded: isBuilded,\n    }));\n  }\n\n  const buildAndMoveRobot = (direction: string, startCordinates: cordinateTypes, instructions: string):void => {\n    let currentRobot = {...state.current_robot};\n    currentRobot.current_direction = orientationToDegrees(direction);\n    currentRobot.cordinates = startCordinates;\n    setState((prevState: InitialContextTypes) => ({\n      ...prevState,\n      current_robot: currentRobot\n    }), moveRobot(currentRobot, instructions));\n  }\n\n  const constructBoardGrid = (boardWidth: number, boardHeight: number):number[][] => {\n    let grid = [];\n    let rows = [];\n    //Rows\n    for (let x = 0; x < boardWidth; x++) rows.push(0);\n    // Columns\n    for (let y = 0; y < boardHeight; y++) grid.push([...rows]);\n\n    return grid;\n  }\n\n  const buildBoard = (boardWidth: number, boardHeight: number):void => {\n    setState((prevState: InitialContextTypes) => ({\n      ...prevState,\n      board: {\n        width: boardWidth,\n        height: boardHeight,\n        grid: constructBoardGrid(boardWidth, boardHeight) \n      }\n    }), setBoardBuilded(true));\n  }\n\n  const isLost = (position: cordinateTypes):boolean => {\n    if (!state.lost_cordinates.some((elem: cordinateTypes) => elem.x === position.x && elem.y === position.y)) {\n      currentRobotIsLost = true;\n      setLostCordinates(position);\n      return true;\n    }\n    return false\n  }\n\n  const isOutsideBoard = (position: cordinateTypes):boolean => {\n    if (position.x < 0 || position.x >= state.board.width || position.y < 0 || position.y >= state.board.height) {\n      return true;\n    }\n    return false\n  }\n\n  const moveRobot = (currentRobot: currentRobotTypes, instructions: string):void => {\n    let currentDirection: number = currentRobot.current_direction;\n    let newPosition: cordinateTypes = currentRobot.cordinates;\n    let lastPosition: cordinateTypes = currentRobot.cordinates;\n\n    instructions.split('').every(move => {\n      switch (move.toUpperCase()) {\n        //RIGHT\n        case 'R':\n          currentDirection += ROTATE_RIGHT;\n          break;\n        //LEFT\n        case 'L':\n          currentDirection += ROTATE_LEFT;\n          break;\n        //FORWARD\n        case 'F':\n          lastPosition = {...newPosition};\n          switch (currentDirection) {\n            case 0:\n              newPosition.y--;\n              break;\n            case 90:\n              newPosition.x++;\n              break;\n            case 180:\n              newPosition.y++;\n              break;\n            case 270:\n              newPosition.x--;\n              break;\n          }\n          break;\n      }\n\n      if (isOutsideBoard(newPosition)) {\n        if (isLost(newPosition)) {\n          return false;\n        }\n        else {\n          newPosition = lastPosition;\n        }\n      }\n\n      if (currentDirection === 360) {\n        currentDirection = 0;\n      } else if (currentDirection < 0) {\n        currentDirection += 360;\n      }\n\n      return true;\n    });\n\n    currentRobot = {\n      current_direction: currentDirection,\n      cordinates: newPosition,\n      lost: currentRobotIsLost\n    }\n\n    if(!currentRobotIsLost) {\n      setRobotOnBoard(newPosition);\n    }\n\n    setRobotScent(currentRobot);\n  }\n\n  const setRobotOnBoard = (cordinates: cordinateTypes):void => {\n    let newGrid = [...state.board.grid];\n    newGrid[cordinates.y][cordinates.x] = currentRobotId;\n    currentRobotId++;\n\n    setState((prevState: InitialContextTypes) => ({\n      ...prevState,\n      board: {\n        ...prevState.board,\n        grid: newGrid,\n      }\n    }));\n  }\n\n  const setRobotScent = (currentRobot: currentRobotTypes):void => {\n    let robotScents:string[] = [...state.robot_scents];\n    let scent:string = `${currentRobot.cordinates.x} ${currentRobot.cordinates.y} ${degreesToOrientation(currentRobot.current_direction)}`;\n\n    if (currentRobot.lost) {\n      scent += ' LOST';\n    }\n\n    robotScents.push(scent);\n\n    setState((prevState: InitialContextTypes) => ({\n      ...prevState,\n      robot_scents: robotScents\n    }));\n  }\n\n  return {\n    getBoard,\n    getRobotScents,\n    getBoardBuilded,\n    getBoardWidth,\n    getBoardHeight,\n    setBoardBuilded,\n    buildBoard,\n    buildAndMoveRobot\n  }\n\n}\n\n\nexport default useBoardData;\n","import React, {useState} from 'react';\r\n\r\nimport useBoardData from '../../hooks/useBoardData';\r\n\r\nconst MAX_BOARD_SIZE = 50;\r\nconst MIN_BOARD_SIZE = 0;\r\n\r\nconst BoardParams: React.FC<{}> = () => {\r\n\r\n    const {buildBoard} = useBoardData();\r\n\r\n    const [boardWidth, setBoardWidth] = useState(0);\r\n    const [boardHeight, setBoardHeight] = useState(0);\r\n\r\n    const [widthValue, setWidthValue] = useState(\"\");\r\n    const [heightValue, setHeightValue] = useState(\"\");\r\n    const isFormValid:() => boolean = () => widthValue !== \"\" && heightValue !== \"\";\r\n\r\n    const handleChangeBoardWidth = (e:React.FormEvent<HTMLInputElement>):void => {\r\n        let value:number = parseInt(e.currentTarget.value);\r\n        if (value >= MIN_BOARD_SIZE && value <= MAX_BOARD_SIZE) {\r\n            setWidthValue(value.toString())\r\n            setBoardWidth(value);\r\n        }\r\n        else {\r\n            setWidthValue(widthValue.toString())\r\n        }\r\n    }\r\n\r\n    const handleChangeBoardHeight = (e:React.FormEvent<HTMLInputElement>):void => {\r\n        let value:number = parseInt(e.currentTarget.value);\r\n        if (value >= MIN_BOARD_SIZE && value <= MAX_BOARD_SIZE) {\r\n            setHeightValue(value.toString())\r\n            setBoardHeight(value);\r\n        }\r\n        else {\r\n            setHeightValue(heightValue.toString())\r\n        }\r\n    }\r\n\r\n    const handleClickBuildBoard = ():void => {\r\n        buildBoard(boardWidth, boardHeight);\r\n        clearInputs();\r\n    }\r\n\r\n    const clearInputs = ():void => {\r\n        setWidthValue(\"\");\r\n        setHeightValue(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"board-params\">\r\n            <h1>Board params</h1>\r\n            <div className=\"form-element\">\r\n                <label>Board width</label>\r\n                <input type=\"number\" value={widthValue} onChange={handleChangeBoardWidth} placeholder=\"X\" />\r\n            </div>\r\n            <div className=\"form-element\">\r\n                <label>Board height</label>\r\n                <input type=\"number\" value={heightValue} onChange={handleChangeBoardHeight} placeholder=\"Y\" />\r\n            </div>\r\n            <button onClick={handleClickBuildBoard} disabled={!isFormValid()}>Build board</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardParams;","import useBoardData from '../../hooks/useBoardData';\r\nimport { BoardTypes } from '../../context.types';\r\n\r\nconst Board: React.FC<{}> = () => {\r\n\r\n    const {getBoard} = useBoardData();\r\n\r\n    const board: BoardTypes = getBoard();\r\n\r\n    return (\r\n        <section className=\"board\">\r\n            <h1>Board</h1>\r\n            <div className=\"board-container\">\r\n                {board && board.grid.map((row: number[], i: number) => (\r\n                    <div className=\"board-row\" key={`board-row-${i}`}>\r\n                        {row.map((col:number, j:number) => (\r\n                            <span key={`board-row-${i}-col-${j}`} className=\"board-item\">{col ? col : ''}</span>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Board;","import useBoardData from '../../hooks/useBoardData';\r\n\r\nconst RobotScents: React.FC<{}> = () => {\r\n\r\n    const {getRobotScents} = useBoardData();\r\n\r\n    const robotScents: string[] = getRobotScents();\r\n\r\n    return (\r\n        <section className=\"robot-scents\">\r\n            <h1>Robot Scents</h1>\r\n            {robotScents && robotScents.map((scent:string, i:number) => (\r\n                <b key={`scent-${i}`}>{scent}</b>\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default RobotScents;","import {useState} from 'react';\r\n\r\nimport useBoardData from '../../hooks/useBoardData';\r\nimport { validateInput } from '../../utils/functions';\r\nimport { cordinateTypes } from '../../context.types';\r\n\r\nconst REGEX_DIRECTION = /^[NSEW]{1}$/;\r\nconst REGEX_INSTRUCTIONS = /^[RLF]{1,100}$/;\r\n\r\nconst RobotInstructions: React.FC<{}> = () => {\r\n\r\n    const {buildAndMoveRobot, getBoardWidth, getBoardHeight} = useBoardData();\r\n\r\n    const boardWidth:number = getBoardWidth();\r\n    const boardHeight:number = getBoardHeight();\r\n\r\n    const [robotStartCordinates, setRobotStartCordinates] = useState<cordinateTypes>({x: 0, y: 0});\r\n    const [robotDirection, setRobotDirection] = useState('N');\r\n    const [robotInstructions, setRobotInstructions] = useState('');\r\n\r\n    const [xValue, setXValue] = useState(\"\");\r\n    const [yValue, setYValue] = useState(\"\");\r\n    const [initialDirectionValue, setInitialDirectionValue] = useState(\"\");\r\n    const [instructionsValue, setInstructionsValue] = useState(\"\");\r\n    const isFormValid:() => boolean = () => xValue !== \"\" && yValue !== \"\" && initialDirectionValue !== \"\" && instructionsValue !== \"\";\r\n\r\n    const handleChangeXCordinate = (e:React.FormEvent<HTMLInputElement>):void => {\r\n        let value:number = parseInt(e.currentTarget.value);\r\n        if (value >= 0 && value <= boardWidth) {\r\n            setXValue(value.toString())\r\n            setRobotStartCordinates(prevState => ({\r\n                ...prevState,\r\n                x: value\r\n            }));\r\n        }\r\n        else {\r\n            setXValue(xValue)\r\n        }\r\n        \r\n    }\r\n\r\n    const handleChangeYCordinate = (e:React.FormEvent<HTMLInputElement>):void => {\r\n        let value:number = parseInt(e.currentTarget.value);\r\n        if (value >= 0 && value <= boardHeight) {\r\n            setYValue(value.toString())\r\n            setRobotStartCordinates(prevState => ({\r\n                ...prevState,\r\n                y: value\r\n            }));\r\n        }\r\n        else {\r\n            setYValue(yValue)\r\n        }\r\n    }\r\n\r\n    const handleChangeRobotDirection = (e:React.FormEvent<HTMLInputElement>):void => {\r\n        let value:string = e.currentTarget.value.toUpperCase();\r\n        if (validateInput(REGEX_DIRECTION, value)) {\r\n            setInitialDirectionValue(value)\r\n            setRobotDirection(value);\r\n        }\r\n        else {\r\n            setInitialDirectionValue(initialDirectionValue);\r\n        }\r\n    }\r\n\r\n    const handleChangeRobotInstructions = (e:React.FormEvent<HTMLInputElement>):void => {\r\n        let value:string = e.currentTarget.value.toUpperCase();\r\n        if (validateInput(REGEX_INSTRUCTIONS, value)) {\r\n            setInstructionsValue(value)\r\n            setRobotInstructions(value);\r\n        }\r\n        else {\r\n            setInstructionsValue(instructionsValue);\r\n        }\r\n    }\r\n\r\n    const handleClickMoveRobot = ():void => {\r\n        buildAndMoveRobot(robotDirection, robotStartCordinates, robotInstructions);\r\n        clearInputs();\r\n    }\r\n\r\n    const clearInputs = ():void => {\r\n        setXValue(\"\");\r\n        setYValue(\"\");\r\n        setInitialDirectionValue(\"\");\r\n        setInstructionsValue(\"\");\r\n    }\r\n\r\n    return (\r\n        <section className=\"robot-instructions\">\r\n            <h1>New robot</h1>\r\n            <div className=\"form-element\">\r\n                <label>Robot start cordinates</label>\r\n                <input type=\"number\" value={xValue} onChange={handleChangeXCordinate} min=\"0\" max={boardWidth} placeholder=\"X\" />\r\n                <input type=\"number\" value={yValue} onChange={handleChangeYCordinate} min=\"0\" max={boardHeight} placeholder=\"Y\" />\r\n            </div>\r\n            <div className=\"form-element\">\r\n                <label>Robot initial direction</label>\r\n                <input type=\"text\" value={initialDirectionValue} onChange={handleChangeRobotDirection} placeholder=\"N, S, E, W\" />\r\n            </div>\r\n            <div className=\"form-element\">\r\n                <label>Robot instructions</label>\r\n                <input type=\"text\" value={instructionsValue} onChange={handleChangeRobotInstructions} placeholder=\"L, R, F\" />\r\n            </div>\r\n            <button onClick={handleClickMoveRobot} disabled={!isFormValid()}>Move robot</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default RobotInstructions;","import BoardParams from './components/Board/BoardParams';\nimport useBoardData from './hooks/useBoardData';\nimport Board from './components/Board';\nimport RobotScents from './components/RobotScents';\nimport RobotInstructions from './components/RobotInstructions';\n\nconst App: React.FC<{}> = () => {\n\n    const {getBoardBuilded} = useBoardData();\n\n    const boardBuilded:boolean = getBoardBuilded();\n    \n    return (\n        <>\n            {boardBuilded ? \n                <>\n                    <Board />\n                    <div className=\"information-container\">\n                        <RobotInstructions />\n                        <RobotScents />\n                    </div>\n                </>\n            : <BoardParams />}\n        </>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/general.scss';\nimport App from './app';\nimport { BoardProvider } from \"./context\";\n\nReactDOM.render(\n  <React.StrictMode>\n        <BoardProvider >\n          <App />\n        </BoardProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}